CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY MOVES_PQ01 IS

   --FUNCION PARA CONVERTIR LAS COLUMNAS DE BOARD A NÚMERO PARA MEJOR MANEJO INTERNO DE VALIDACIONES
   FUNCTION COL_LETTER_TO_NUM(COL VARCHAR2) RETURN NUMBER IS
	NEW_NUM NUMBER;
   BEGIN
	IF COL = 'A' THEN
	   NEW_NUM := 1;
	ELSIF COL ='B' THEN
	   NEW_NUM := 2;
    	ELSIF COL ='C' THEN
	   NEW_NUM := 3;
    	ELSIF COL ='D' THEN
	   NEW_NUM := 4;
    	ELSIF COL ='E' THEN
	   NEW_NUM := 5;
    	ELSIF COL ='F' THEN
	   NEW_NUM := 6;
    	ELSIF COL ='G' THEN
	   NEW_NUM := 7;
	ELSE
	   NEW_NUM := 8;
	END IF;    

   RETURN NEW_NUM;
   END COL_LETTER_TO_NUM;

--FUNCION PARA CONVERTIR LAS COLUMNAS DE BOARD A LETRAS PARA ACTUALIZAR EN BOARD
   FUNCTION COL_NUM_TO_LETTER(COL NUMBER) RETURN VARCHAR2 IS
	NEW_COL VARCHAR2(1);
   BEGIN
	IF COL = 1 THEN
	   NEW_COL := 'A';
	ELSIF COL = 2 THEN
	   NEW_COL:= 'B';	
  	ELSIF COL = 3 THEN
	   NEW_COL:= 'C';	
	ELSIF COL = 4 THEN
	   NEW_COL:= 'D';	
	ELSIF COL = 5 THEN
	   NEW_COL:= 'E';	
	ELSIF COL = 6 THEN
	   NEW_COL:= 'F';	
	ELSIF COL = 7 THEN
	   NEW_COL:= 'G';	
	ELSE
	   NEW_COL := 'H';
	END IF;    
   RETURN NEW_COL;
   END COL_NUM_TO_LETTER;

   PROCEDURE MOVE_PIECE(P_CORD_SOURCE VARCHAR2, P_CORD_TARGET VARCHAR2) IS
   --P_CORD_SOURCE= A2 P_CORD_TARGET= A3 ejemplo
        V_SOURCE_ROW    VARCHAR2(1);--2
        V_SOURCE_COLUMN VARCHAR2(1);--A
        V_TARGET_ROW    VARCHAR2(1);--3
        V_TARGET_COLUMN VARCHAR2(1);--A
        V_PIECE_SOURCE VARCHAR2(1);
        V_PIECE_TARGET VARCHAR2(1);-- PARA VER SI ESTA OCUPADA POR UNA PIEZA DE LA MISMA PERSONA
	    V_STATUS_PIECE VARCHAR2(1) := 'N';
        V_PIECES_MAYUSCULA BOOLEAN;
        V_PIECES_MINUSCULA BOOLEAN;
       
        

    BEGIN

        --gets the separate cords
        SELECT SUBSTR(P_CORD_SOURCE,1,1) INTO V_SOURCE_COLUMN FROM DUAL;
        SELECT SUBSTR(P_CORD_SOURCE,2,1) INTO V_SOURCE_ROW FROM DUAL;
        SELECT SUBSTR(P_CORD_TARGET,1,1) INTO V_TARGET_COLUMN FROM DUAL;
        SELECT SUBSTR(P_CORD_TARGET,2,1) INTO V_TARGET_ROW FROM DUAL;
        
        DBMS_OUTPUT.PUT_LINE('SOURCE_COLUMNA: ' || V_SOURCE_COLUMN);
        DBMS_OUTPUT.PUT_LINE('SOURCE_FILA: ' || V_SOURCE_ROW);
        DBMS_OUTPUT.PUT_LINE('TARGET_COLUMNA: ' || V_TARGET_COLUMN);
        DBMS_OUTPUT.PUT_LINE('TARGET_FILA: ' || V_TARGET_ROW);
        
        SELECT PIEZA INTO V_PIECE_SOURCE FROM BOARD WHERE FILA= V_SOURCE_ROW AND COLUMNA= V_SOURCE_COLUMN;
        SELECT PIEZA INTO V_PIECE_TARGET FROM BOARD WHERE FILA= V_TARGET_ROW AND COLUMNA= V_TARGET_COLUMN;
        
        IF(V_PIECE_SOURCE IS NULL) THEN
        DBMS_OUTPUT.PUT_LINE('El campo seleccionado no contiene una pieza');
         
        ELSE 
           
          --SELECT STATUS INTO V_STATUS_PIECE FROM PIECES_STATUS WHERE CORD = P_CORD_SOURCE;
	  SELECT  nvl(  (SELECT STATUS FROM PIECES_STATUS WHERE CORD = P_CORD_SOURCE),  'N'  )  into  V_STATUS_PIECE  FROM DUAL;
	--DBMS_OUTPUT.PUT_LINE(V_PIECE_SOURCE||' MOVE_PIECE');
        CASE (V_PIECE_SOURCE)
          --Peon
              WHEN 'P'  THEN 
		MOVES_PQ01.MOVE_P(P_CORD_SOURCE,P_CORD_TARGET,V_PIECE_SOURCE,V_STATUS_PIECE);
		--DBMS_OUTPUT.PUT_LINE('Peon P');

              WHEN 'p'  THEN MOVES_PQ01.MOVE_P(P_CORD_SOURCE,P_CORD_TARGET,V_PIECE_SOURCE,V_STATUS_PIECE);
          --Torre      
              WHEN 'T'  THEN 
		--DBMS_OUTPUT.PUT_LINE('Torre T');
		      MOVES_PQ01.MOVE_T(P_CORD_SOURCE,P_CORD_TARGET,V_PIECE_SOURCE,V_STATUS_PIECE);
		

             WHEN 't'  THEN MOVES_PQ01.MOVE_T(P_CORD_SOURCE,P_CORD_TARGET,V_PIECE_SOURCE,V_STATUS_PIECE);
           --Caballo    
             WHEN 'C'  THEN MOVES_PQ01.MOVE_C(P_CORD_SOURCE,P_CORD_TARGET,V_PIECE_SOURCE,V_STATUS_PIECE);

             WHEN 'c'  THEN MOVES_PQ01.MOVE_C(P_CORD_SOURCE,P_CORD_TARGET,V_PIECE_SOURCE,V_STATUS_PIECE);
           --Alfil 
             WHEN 'A'  THEN MOVES_PQ01.MOVE_A(P_CORD_SOURCE,P_CORD_TARGET,V_PIECE_SOURCE,V_STATUS_PIECE);

             WHEN 'a'  THEN MOVES_PQ01.MOVE_A(P_CORD_SOURCE,P_CORD_TARGET,V_PIECE_SOURCE,V_STATUS_PIECE);
           --Rey
             WHEN 'K'  THEN MOVES_PQ01.MOVE_K(P_CORD_SOURCE,P_CORD_TARGET,V_PIECE_SOURCE,V_STATUS_PIECE);
               DBMS_OUTPUT.PUT_LINE('entro para mover el rey');
             WHEN 'k'  THEN MOVES_PQ01.MOVE_K(P_CORD_SOURCE,P_CORD_TARGET,V_PIECE_SOURCE,V_STATUS_PIECE);
               DBMS_OUTPUT.PUT_LINE('entro para mover el rey');
          --Reina
             WHEN 'Q'  THEN MOVES_PQ01.MOVE_Q(P_CORD_SOURCE,P_CORD_TARGET,V_PIECE_SOURCE,V_STATUS_PIECE);
               
             WHEN 'q'  THEN MOVES_PQ01.MOVE_Q(P_CORD_SOURCE,P_CORD_TARGET,V_PIECE_SOURCE,V_STATUS_PIECE);

             ELSE DBMS_OUTPUT.PUT_LINE('Ha ocurrido un error');
          END CASE;
    
        
         END IF;
   
	EXCEPTION WHEN NO_DATA_FOUND THEN
		V_STATUS_PIECE := 'N';
END MOVE_PIECE;

   --MOVER PEON
   PROCEDURE MOVE_P(P_CORD_SOURCE VARCHAR2, P_CORD_TARGET VARCHAR2, P_PIECE VARCHAR2, P_STATUS_PIECE VARCHAR2) IS
	    V_SOURCE_ROW    VARCHAR2(1);--2
        V_SOURCE_COLUMN VARCHAR2(1);--A
        V_TARGET_ROW    VARCHAR2(1);--3
        V_TARGET_COLUMN VARCHAR2(1);--A
        V_PIECE_SOURCE VARCHAR2(1);
        V_SOURCE_COLUMN_NUM NUMBER;
        V_TARGET_COLUMN_NUM NUMBER;
	--LOCAL SON PARA VALIDAR POSIBLES MOVIMIENTOS
	    V_ROW_LOCAL VARCHAR2(1);
	    V_COL_LOCAL VARCHAR2(1);
	    V_TARGET_VALUE VARCHAR2(1);
   BEGIN
	--gets the separate cords
    SELECT SUBSTR(P_CORD_SOURCE,1,1) INTO V_SOURCE_COLUMN FROM DUAL;
    SELECT SUBSTR(P_CORD_TARGET,1,1) INTO V_TARGET_COLUMN FROM DUAL;

	SELECT SUBSTR(P_CORD_SOURCE,2,1) INTO V_SOURCE_ROW FROM DUAL;
    SELECT SUBSTR(P_CORD_TARGET,2,1) INTO V_TARGET_ROW FROM DUAL;

	--OBTENER PIEZA DE DESTINO INDICADO
	--SELECT PIEZA INTO V_TARGET_VALUE FROM BOARD WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;

	--nuevas columnas a números
	V_SOURCE_COLUMN_NUM := TO_NUMBER(COL_LETTER_TO_NUM(V_SOURCE_COLUMN));
	V_TARGET_COLUMN_NUM := TO_NUMBER(COL_LETTER_TO_NUM(V_TARGET_COLUMN));

 	SELECT PIEZA INTO V_TARGET_VALUE FROM BOARD WHERE FILA = V_TARGET_ROW AND COLUMNA = SUBSTR(P_CORD_TARGET,1,1);

	--DESPLAZAMIENTO 2 ESPACIOS
	IF (P_STATUS_PIECE = 'F') AND (V_SOURCE_ROW + 2 = V_TARGET_ROW OR V_SOURCE_ROW - 2 = V_TARGET_ROW) THEN
	    IF(P_PIECE = 'P') THEN
		V_ROW_LOCAL := V_SOURCE_ROW + 2;
		IF(V_ROW_LOCAL = V_TARGET_ROW AND V_TARGET_VALUE = ' ') THEN
		   UPDATE PIECES_STATUS SET CORD = P_CORD_TARGET,  STATUS = 'T'  WHERE CORD = P_CORD_SOURCE;
		   UPDATE BOARD SET PIEZA = ' ' WHERE FILA= V_SOURCE_ROW AND COLUMNA= V_SOURCE_COLUMN;
           	   UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA= V_TARGET_ROW AND COLUMNA= V_TARGET_COLUMN;
		   DBMS_OUTPUT.PUT_LINE('Act. (Peon-2M-P)');
		ELSE
		   DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. (Peon-2M-P)');
		END IF;
    	    END IF;
	    IF (P_PIECE = 'p')  THEN
		V_ROW_LOCAL := V_SOURCE_ROW - 2;
		 IF (V_ROW_LOCAL = V_TARGET_ROW AND V_TARGET_VALUE = ' ') THEN
		   UPDATE PIECES_STATUS SET CORD = P_CORD_TARGET,  STATUS = 'T'  WHERE CORD = P_CORD_SOURCE;
		   UPDATE BOARD SET PIEZA = ' ' WHERE FILA= V_SOURCE_ROW AND COLUMNA= V_SOURCE_COLUMN;
           	   UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA= V_TARGET_ROW AND COLUMNA= V_TARGET_COLUMN;	
		    DBMS_OUTPUT.PUT_LINE('Act. (Peon-2M-p)');
		ELSE
		   DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. (Peon-2M-p)');
		 END IF;
	    END IF;
	--DESPLAZAMIENTO 1 ESPACIO	
	ELSIF (P_STATUS_PIECE = 'T' OR P_STATUS_PIECE = 'F') AND (V_SOURCE_ROW - 1 != V_TARGET_ROW OR V_SOURCE_ROW + 1 != V_TARGET_ROW) THEN

	    --DESPLAZAMIENTOS VERTICALES UNITARIOS
	    IF (P_PIECE = 'P') THEN
	        --V_ROW_LOCAL := V_SOURCE_ROW + 1;
		DBMS_OUTPUT.PUT_LINE('Entró');
		    IF (V_SOURCE_ROW + 1 = V_TARGET_ROW AND V_TARGET_VALUE = ' ') THEN
		       UPDATE PIECES_STATUS SET CORD = P_CORD_TARGET,  STATUS = 'T'  WHERE CORD = P_CORD_SOURCE;
		       UPDATE BOARD SET PIEZA = ' ' WHERE FILA= V_SOURCE_ROW AND COLUMNA= V_SOURCE_COLUMN;
        	       UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA= V_TARGET_ROW AND COLUMNA= V_TARGET_COLUMN;
		       DBMS_OUTPUT.PUT_LINE('Act. (Peon-1M-P)');
		    ELSE
			DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. (Peon-1M-P)');
		    END IF;
	    END IF;
	    IF (P_PIECE = 'p')  THEN
	        --V_ROW_LOCAL := V_SOURCE_ROW - 1;
		    IF (V_SOURCE_ROW - 1 = V_TARGET_ROW AND V_TARGET_VALUE = ' ') THEN	
		       UPDATE PIECES_STATUS SET CORD = P_CORD_TARGET,  STATUS = 'T'  WHERE CORD = P_CORD_SOURCE;
		       UPDATE BOARD SET PIEZA = ' ' WHERE FILA= V_SOURCE_ROW AND COLUMNA= V_SOURCE_COLUMN;
        	       UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA= V_TARGET_ROW AND COLUMNA= V_TARGET_COLUMN;
			 DBMS_OUTPUT.PUT_LINE('Act. (Peon-1M-p)');
		    ELSE
			DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. (Peon-1M-p)');
		    END IF;
	    END IF;


	    --DESPLAZAMIENTO DIAGONAL PARA ELIMINAR PIEZA
	    IF (P_PIECE = 'P') THEN
	    	IF (V_SOURCE_ROW + 1 = V_TARGET_ROW AND V_TARGET_VALUE != ' ') AND (COL_NUM_TO_LETTER(COL_LETTER_TO_NUM(V_SOURCE_COLUMN) + 1) = V_TARGET_COLUMN OR COL_NUM_TO_LETTER(COL_LETTER_TO_NUM(V_SOURCE_COLUMN) - 1) = V_TARGET_COLUMN) THEN
		     UPDATE BOARD SET PIEZA = ' ' WHERE FILA= V_SOURCE_ROW AND COLUMNA= V_SOURCE_COLUMN;
        	     UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA= V_TARGET_ROW AND COLUMNA= V_TARGET_COLUMN;
		     DBMS_OUTPUT.PUT_LINE('Act. (Peon-DIAG-P)');
	    	ELSE
		    DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. (Peon-DIAG-P)');
	    	END IF;
	    END IF;
       	    IF (P_PIECE = 'p') THEN

	      	IF (V_SOURCE_ROW - 1 = V_TARGET_ROW AND V_TARGET_VALUE != ' ') AND (COL_NUM_TO_LETTER(COL_LETTER_TO_NUM(V_SOURCE_COLUMN) + 1) = V_TARGET_COLUMN OR COL_NUM_TO_LETTER(COL_LETTER_TO_NUM(V_SOURCE_COLUMN) - 1) = V_TARGET_COLUMN) THEN
		     UPDATE BOARD SET PIEZA = ' ' WHERE FILA= V_SOURCE_ROW AND COLUMNA= V_SOURCE_COLUMN;
        	     UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA= V_TARGET_ROW AND COLUMNA= V_TARGET_COLUMN;
	             DBMS_OUTPUT.PUT_LINE('Act. (Peon-DIAG-p)');
	      	ELSE
		    DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. (Peon-DIAG-p)');
	    	END IF;
	    END IF;

	
  	ELSE  
	    DBMS_OUTPUT.PUT_LINE('No se puede realizar la acción peon'); 
  END IF;	
 END MOVE_P;

 PROCEDURE MOVE_T(P_CORD_SOURCE VARCHAR2, P_CORD_TARGET VARCHAR2, P_PIECE VARCHAR2, P_STATUS_PIECE VARCHAR2 ) IS

 	V_SOURCE_ROW    VARCHAR2(1);--2
        V_SOURCE_COLUMN VARCHAR2(1);--A
        V_TARGET_ROW    VARCHAR2(1);--3
        V_TARGET_COLUMN VARCHAR2(1);--A
        V_PIECE_SOURCE VARCHAR2(1);
        V_SOURCE_COLUMN_NUM NUMBER;
        V_TARGET_COLUMN_NUM NUMBER;
	--LOCAL SON PARA VALIDAR POSIBLES MOVIMIENTOS
	V_COUNT_FIRST NUMBER;
	V_COUNT_LAST NUMBER;
	V_COUNTER NUMBER;
	V_TARGET_VALUE VARCHAR2(1);
   BEGIN
	--gets the separate cords
    SELECT SUBSTR(P_CORD_SOURCE,1,1) INTO V_SOURCE_COLUMN FROM DUAL;
    SELECT SUBSTR(P_CORD_TARGET,1,1) INTO V_TARGET_COLUMN FROM DUAL;

    SELECT SUBSTR(P_CORD_SOURCE,2,1) INTO V_SOURCE_ROW FROM DUAL;
    SELECT SUBSTR(P_CORD_TARGET,2,1) INTO V_TARGET_ROW FROM DUAL;

	--OBTENER PIEZA DE DESTINO INDICADO
	--SELECT PIEZA INTO V_TARGET_VALUE FROM BOARD WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;

	--nuevas columnas a números
	V_SOURCE_COLUMN_NUM := COL_LETTER_TO_NUM(V_SOURCE_COLUMN);
	V_TARGET_COLUMN_NUM := COL_LETTER_TO_NUM(V_TARGET_COLUMN);

 	SELECT PIEZA INTO V_TARGET_VALUE FROM BOARD WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;
--DBMS_OUTPUT.PUT_LINE('ENTRÓ EN TORRE - '||V_TARGET_VALUE);

	--DESPLAZAMIENTO VERTICAL
	IF (V_SOURCE_COLUMN = V_TARGET_COLUMN) THEN
--DBMS_OUTPUT.PUT_LINE('Entra vertical T');
		--DBMS_OUTPUT.PUT_LINE('V_SOURCE_ROW: '||V_SOURCE_ROW||' y V_TARGET_ROW: '||V_TARGET_ROW);
		
		--ifs para verificar si es ascendente o descendente
		DBMS_OUTPUT.PUT_LINE('Entra vertical: '||(V_SOURCE_ROW - V_TARGET_ROW));
		--VERTICAL ASCENDENTE
		IF (V_SOURCE_ROW - V_TARGET_ROW < 0) THEN
			--DBMS_OUTPUT.PUT_LINE('Entra vertical T -ASC');
			V_COUNT_FIRST := V_SOURCE_ROW+1;
			V_COUNT_LAST := V_TARGET_ROW;
			FOR PIC IN V_COUNT_FIRST..V_COUNT_LAST LOOP
		   SELECT PIEZA INTO V_TARGET_VALUE FROM BOARD WHERE FILA = PIC AND COLUMNA = SUBSTR(P_CORD_TARGET,1,1);

		   --FICHAS MAYUS JUG 1
		   IF ((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')) AND (P_PIECE = 'T') THEN
			DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. Ficha propia bloqueando paso (T-Vertical-asc)');
			EXIT;

		   ELSIF ((V_TARGET_VALUE='a')OR (V_TARGET_VALUE='p') OR (V_TARGET_VALUE='q') OR (V_TARGET_VALUE='t')OR (V_TARGET_VALUE='c')OR (V_TARGET_VALUE='k'))  AND (PIC = V_TARGET_ROW) THEN
			--UPDATE PIECES_STATUS SET CORD = P_CORD_TARGET,  STATUS = 'T'  WHERE CORD = P_CORD_SOURCE;
		   	UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
           	   	UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   	DBMS_OUTPUT.PUT_LINE('Act. (Torre-T-Vertical-eliminó pieza-asc)');
			EXIT;
		   
		   ELSIF (PIC = V_TARGET_ROW) THEN
			DBMS_OUTPUT.PUT_LINE('PIC en act: '||PIC);
			UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
           	   	UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   	DBMS_OUTPUT.PUT_LINE('Act. (Torre-T-Vertical-Vacia-asc)');
			EXIT;
		   END IF;

		   --FICHAS minus JUG 2
		   IF ((V_TARGET_VALUE='a')OR (V_TARGET_VALUE='p') OR (V_TARGET_VALUE='q') OR (V_TARGET_VALUE='t')OR (V_TARGET_VALUE='c')OR (V_TARGET_VALUE='k')) AND (P_PIECE = 't') THEN
			DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. Ficha propia bloqueando paso (t-Vertical-asc)');
			EXIT;

		   ELSIF ((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')) AND (PIC = V_TARGET_ROW) THEN
			--UPDATE PIECES_STATUS SET CORD = P_CORD_TARGET,  STATUS = 'T'  WHERE CORD = P_CORD_SOURCE;
		   	UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
           	   	UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		    	DBMS_OUTPUT.PUT_LINE('Act. (Torre-t-Vertical-eliminó pieza-asc)');
			EXIT;
		   ELSIF (PIC = V_TARGET_ROW) THEN
			UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
           	   	UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   	DBMS_OUTPUT.PUT_LINE('Act. (Torre-t-Vertical-Vacia-asc)');
			EXIT;
		   END IF;

		END LOOP;

		--VERTICAL DESCENDENTE
		ELSE 
			V_COUNTER := V_TARGET_ROW;
			V_COUNT_FIRST := V_SOURCE_ROW;
			V_COUNT_LAST := V_TARGET_ROW;
			FOR PIC IN V_COUNT_LAST..V_COUNT_FIRST LOOP
		   		SELECT PIEZA INTO V_TARGET_VALUE FROM BOARD WHERE FILA = V_COUNTER AND COLUMNA = SUBSTR(P_CORD_TARGET,1,1);

		   --FICHAS MAYUS JUG 1
		   IF ((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')) AND (P_PIECE = 'T') THEN
			DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. Ficha propia bloqueando paso (T-Vertical-desc)');
			EXIT;

		   ELSIF ((V_TARGET_VALUE='a')OR (V_TARGET_VALUE='p') OR (V_TARGET_VALUE='q') OR (V_TARGET_VALUE='t')OR (V_TARGET_VALUE='c')OR (V_TARGET_VALUE='k'))  AND (V_COUNTER = V_TARGET_ROW) THEN
			--UPDATE PIECES_STATUS SET CORD = P_CORD_TARGET,  STATUS = 'T'  WHERE CORD = P_CORD_SOURCE;
		   	UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
           	   	UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   	DBMS_OUTPUT.PUT_LINE('Act. (Torre-T-Vertical-eliminó pieza-desc)');
		   	EXIT;
		   ELSIF (V_COUNTER = V_TARGET_ROW) THEN
			--DBMS_OUTPUT.PUT_LINE('PIC en act: '||PIC);
			UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
           	   	UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   	DBMS_OUTPUT.PUT_LINE('Act. (Torre-T-Vertical-Vacia-desc)');
			EXIT;
		   END IF;

		   --FICHAS minus JUG 2
		   IF ((V_TARGET_VALUE='a')OR (V_TARGET_VALUE='p') OR (V_TARGET_VALUE='q') OR (V_TARGET_VALUE='t')OR (V_TARGET_VALUE='c')OR (V_TARGET_VALUE='k'))  AND (P_PIECE = 't') THEN
			DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. Ficha propia bloqueando paso (t-Vertical-desc)');
			EXIT;

		   ELSIF ((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')) AND (V_COUNTER = V_TARGET_ROW) THEN
			--UPDATE PIECES_STATUS SET CORD = P_CORD_TARGET,  STATUS = 'T'  WHERE CORD = P_CORD_SOURCE;
		   	UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
           	   	UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		    	DBMS_OUTPUT.PUT_LINE('Act. (Torre-t-Vertical-eliminó pieza-desc)');
			EXIT;
		   ELSIF (V_COUNTER = V_TARGET_ROW) THEN
			UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
           	   	UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   	DBMS_OUTPUT.PUT_LINE('Act. (Torre-t-Vertical-Vacia-desc)');
			EXIT;
		   END IF;
		   V_COUNTER := V_COUNTER - 1;
		END LOOP;
		END IF;

		
	    
	--DESPLAZAMIENTO HORIZONTAL
	ELSIF (V_SOURCE_COLUMN != V_TARGET_COLUMN) THEN

		--ifs para verificar si es ascendente o descendente
		DBMS_OUTPUT.PUT_LINE('T Hor before: '||TO_NUMBER(V_SOURCE_COLUMN_NUM - V_TARGET_COLUMN_NUM));
		--HORIZONTAL ASCENDENTE
		IF (V_SOURCE_COLUMN_NUM - V_TARGET_COLUMN_NUM < 0) THEN
			
			V_COUNT_FIRST := V_SOURCE_COLUMN_NUM+1;
			V_COUNT_LAST := V_TARGET_COLUMN_NUM;
			FOR PIC IN V_COUNT_FIRST..V_COUNT_LAST LOOP
		   --DBMS_OUTPUT.PUT_LINE('PIC en horizontal: '||PIC);
		   SELECT PIEZA INTO V_TARGET_VALUE FROM BOARD WHERE FILA = V_SOURCE_ROW AND COLUMNA = COL_NUM_TO_LETTER(PIC);

		   --FICHAS MAYUS JUG 1
		   IF ((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')) AND (P_PIECE = 'T') THEN
			DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. Ficha propia bloqueando paso (T-Horizontal-asc)');
			EXIT;

		   ELSIF ((V_TARGET_VALUE='a')OR (V_TARGET_VALUE='p') OR (V_TARGET_VALUE='q') OR (V_TARGET_VALUE='t')OR (V_TARGET_VALUE='c')OR (V_TARGET_VALUE='k'))  AND (PIC = V_TARGET_COLUMN_NUM) THEN
			--UPDATE PIECES_STATUS SET CORD = P_CORD_TARGET,  STATUS = 'T'  WHERE CORD = P_CORD_SOURCE;
		   	UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
           	   	UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		    	DBMS_OUTPUT.PUT_LINE('Act. (Torre-T-Horizontal-eliminó pieza-asc)');
			EXIT;
		   ELSIF (PIC = V_TARGET_COLUMN_NUM) THEN
			DBMS_OUTPUT.PUT_LINE('PIC en act: '||PIC);
			UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
           	   	UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   	DBMS_OUTPUT.PUT_LINE('Act. (Torre-T-Horizontal-Vacia-asc)');
			EXIT;
		   END IF;

		   --FICHAS minus JUG 2
		   IF ((V_TARGET_VALUE='a')OR (V_TARGET_VALUE='p') OR (V_TARGET_VALUE='q') OR (V_TARGET_VALUE='t')OR (V_TARGET_VALUE='c')OR (V_TARGET_VALUE='k'))  AND (P_PIECE = 't') THEN
			DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. Ficha propia bloqueando paso (t-Horizontal)');
			EXIT;

		   ELSIF ((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')) AND (PIC = V_TARGET_COLUMN_NUM) THEN
			--UPDATE PIECES_STATUS SET CORD = P_CORD_TARGET,  STATUS = 'T'  WHERE CORD = P_CORD_SOURCE;
		   	UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
           	   	UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		    	DBMS_OUTPUT.PUT_LINE('Act. (Torre-t-Horizontal-eliminó pieza-asc)');
			EXIT;
		   ELSIF (PIC = V_TARGET_COLUMN_NUM) THEN
			UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
           	   	UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   	DBMS_OUTPUT.PUT_LINE('Act. (Torre-t-Horizontal-Vacia-asc)');
			EXIT;
		   END IF;

		END LOOP;
		
		--HORIZONTAL DESCENDENTE
		ELSE 
			--DBMS_OUTPUT.PUT_LINE('Hor desc: '||V_TARGET_COLUMN_NUM);
			V_COUNTER := V_TARGET_COLUMN_NUM;
			V_COUNT_FIRST := V_SOURCE_COLUMN_NUM;
			V_COUNT_LAST := V_TARGET_COLUMN_NUM;

			FOR PIC IN V_COUNT_LAST..V_COUNT_FIRST LOOP
		   
		   		SELECT PIEZA INTO V_TARGET_VALUE FROM BOARD WHERE FILA = V_SOURCE_ROW AND COLUMNA = COL_NUM_TO_LETTER(V_COUNTER);
		DBMS_OUTPUT.PUT_LINE(V_COUNTER);
		   --FICHAS MAYUS JUG 1
		   IF ((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')) AND (P_PIECE = 'T') THEN
			DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. Ficha propia bloqueando paso (T-Horizontal-desc)');
			EXIT;

		   ELSIF ((V_TARGET_VALUE='a')OR (V_TARGET_VALUE='p') OR (V_TARGET_VALUE='q') OR (V_TARGET_VALUE='t')OR (V_TARGET_VALUE='c')OR (V_TARGET_VALUE='k'))  AND (V_COUNTER = V_TARGET_COLUMN_NUM) THEN
			--UPDATE PIECES_STATUS SET CORD = P_CORD_TARGET,  STATUS = 'T'  WHERE CORD = P_CORD_SOURCE;
		   	UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
           	   	UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		    	DBMS_OUTPUT.PUT_LINE('Act. (Torre-T-Horizontal-eliminó pieza)');
			EXIT;
		   ELSIF (V_COUNTER = V_TARGET_COLUMN_NUM) THEN
			DBMS_OUTPUT.PUT_LINE('PIC en act: '||PIC);
			UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
           	   	UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   	DBMS_OUTPUT.PUT_LINE('Act. (Torre-T-Horizontal-Vacia)');
			EXIT;
		   END IF;

		   --FICHAS minus JUG 2
		   IF ((V_TARGET_VALUE='a')OR (V_TARGET_VALUE='p') OR (V_TARGET_VALUE='q') OR (V_TARGET_VALUE='t')OR (V_TARGET_VALUE='c')OR (V_TARGET_VALUE='k'))  AND (P_PIECE = 't') THEN
			DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. Ficha propia bloqueando paso (t-Horizontal-desc)');
			EXIT;

		   ELSIF ((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')) AND (V_COUNTER = V_TARGET_COLUMN_NUM) THEN
			--UPDATE PIECES_STATUS SET CORD = P_CORD_TARGET,  STATUS = 'T'  WHERE CORD = P_CORD_SOURCE;
		   UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
           	   UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		    DBMS_OUTPUT.PUT_LINE('Act. (Torre-t-Horizontal-eliminó pieza-desc)');
		    EXIT;
		   ELSIF (V_COUNTER = V_TARGET_COLUMN_NUM) THEN
			UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
           	   	UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   	DBMS_OUTPUT.PUT_LINE('Act. (Torre-t-Horizontal-Vacia-desc)');
			EXIT;
		   END IF;
		V_COUNTER := V_COUNTER - 1;
		END LOOP;
		
		END IF;
		
		
	    
  	END IF;	

	
 END MOVE_T;

 PROCEDURE MOVE_C (P_CORD_SOURCE VARCHAR2, P_CORD_TARGET VARCHAR2, P_PIECE VARCHAR2, P_STATUS_PIECE VARCHAR2 ) IS
 	    V_SOURCE_ROW    VARCHAR2(1);--2
        V_SOURCE_COLUMN VARCHAR2(1);--A
        V_TARGET_ROW    VARCHAR2(1);--3
        V_TARGET_COLUMN VARCHAR2(1);--A
        V_PIECE_SOURCE VARCHAR2(1);
        V_SOURCE_COLUMN_NUM NUMBER;
        V_TARGET_COLUMN_NUM NUMBER;
	--LOCAL SON PARA VALIDAR POSIBLES MOVIMIENTOS
	V_COUNT_FIRST NUMBER;
	V_COUNT_LAST NUMBER;
	V_COUNTER NUMBER;
	V_TARGET_VALUE VARCHAR2(1);
   BEGIN
	--gets the separate cords
    SELECT SUBSTR(P_CORD_SOURCE,1,1) INTO V_SOURCE_COLUMN FROM DUAL;
    SELECT SUBSTR(P_CORD_TARGET,1,1) INTO V_TARGET_COLUMN FROM DUAL;

    SELECT SUBSTR(P_CORD_SOURCE,2,1) INTO V_SOURCE_ROW FROM DUAL;
    SELECT SUBSTR(P_CORD_TARGET,2,1) INTO V_TARGET_ROW FROM DUAL;

	--nuevas columnas a números
	V_SOURCE_COLUMN_NUM := COL_LETTER_TO_NUM(V_SOURCE_COLUMN);
	V_TARGET_COLUMN_NUM := COL_LETTER_TO_NUM(V_TARGET_COLUMN);

 	SELECT PIEZA INTO V_TARGET_VALUE FROM BOARD WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;

	--Desplazaminto vertical ascendente para cualquier ficha de caballo
	IF(V_SOURCE_ROW + 2 = V_TARGET_ROW OR V_SOURCE_ROW - 2 = V_TARGET_ROW) AND (V_SOURCE_COLUMN_NUM + 1 = V_TARGET_COLUMN_NUM OR V_SOURCE_COLUMN_NUM-1 = V_TARGET_COLUMN_NUM) THEN
		--PIEZAS MAYÚSCULAS
		IF(P_PIECE = 'C') THEN		
			IF ((V_TARGET_VALUE='a')OR (V_TARGET_VALUE='p') OR (V_TARGET_VALUE='q') OR (V_TARGET_VALUE='t')OR (V_TARGET_VALUE='c')OR (V_TARGET_VALUE='k') OR (V_TARGET_VALUE = ' ')) THEN
				UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
                		UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   		DBMS_OUTPUT.PUT_LINE('Act. (Caballo-C-Vertical-asc)');
			ELSIF((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K'))  AND (V_TARGET_VALUE != ' ') THEN
				DBMS_OUTPUT.PUT_LINE('Hay una ficha amiga bloqueando el espacio. (Caballo-C-Vertical)');
			ELSE
				DBMS_OUTPUT.PUT_LINE('No se pudo act. (Caballo-C-Vertical)');
			END IF;		
		ELSIF(P_PIECE = 'c') THEN
			IF ((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')OR (V_TARGET_VALUE = ' ')) THEN
				UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
           	   		UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   		DBMS_OUTPUT.PUT_LINE('Act. (Caballo-c-Vertical)');
			ELSIF((V_TARGET_VALUE='a')OR (V_TARGET_VALUE='p') OR (V_TARGET_VALUE='q') OR (V_TARGET_VALUE='t')OR (V_TARGET_VALUE='c')OR (V_TARGET_VALUE='k'))  AND (V_TARGET_VALUE != ' ') THEN
				DBMS_OUTPUT.PUT_LINE('Hay una ficha amiga bloqueando el espacio. (Caballo-c-Vertical)');
			ELSE
				DBMS_OUTPUT.PUT_LINE('No se pudo act. (Caballo-c-Vertical)');
			END IF;	

		ELSE
			DBMS_OUTPUT.PUT_LINE('No se pudo realizar el movimiento de caballo');
		END IF;

	END IF;
 	
 END MOVE_C;


--ALFIL
 PROCEDURE MOVE_A (P_CORD_SOURCE VARCHAR2, P_CORD_TARGET VARCHAR2, P_PIECE VARCHAR2, P_STATUS_PIECE VARCHAR2 ) IS
     	V_SOURCE_ROW    VARCHAR2(1);--2
        V_SOURCE_COLUMN VARCHAR2(1);--A
        V_TARGET_ROW    VARCHAR2(1);--3
        V_TARGET_COLUMN VARCHAR2(1);--A
        V_PIECE_SOURCE VARCHAR2(1);
        V_SOURCE_COLUMN_NUM NUMBER;
        V_TARGET_COLUMN_NUM NUMBER;
	--LOCAL SON PARA VALIDAR POSIBLES MOVIMIENTOS
	V_COUNT_FIRST NUMBER;
	V_COUNT_LAST NUMBER;
	V_COUNTER_COL NUMBER;
	V_COUNTER_ROW NUMBER;
	V_COUNTER NUMBER;
	V_TARGET_VALUE VARCHAR2(1);
   BEGIN
	--gets the separate cords
    SELECT SUBSTR(P_CORD_SOURCE,1,1) INTO V_SOURCE_COLUMN FROM DUAL;
    SELECT SUBSTR(P_CORD_TARGET,1,1) INTO V_TARGET_COLUMN FROM DUAL;

    SELECT SUBSTR(P_CORD_SOURCE,2,1) INTO V_SOURCE_ROW FROM DUAL;
    SELECT SUBSTR(P_CORD_TARGET,2,1) INTO V_TARGET_ROW FROM DUAL;

	--nuevas columnas a números
	V_SOURCE_COLUMN_NUM := COL_LETTER_TO_NUM(V_SOURCE_COLUMN);
	V_TARGET_COLUMN_NUM := COL_LETTER_TO_NUM(V_TARGET_COLUMN);

 	SELECT PIEZA INTO V_TARGET_VALUE FROM BOARD WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;

	--Desplazamiento diagonal superior derecho
	IF(V_SOURCE_COLUMN_NUM - V_TARGET_COLUMN_NUM < 0 AND V_SOURCE_ROW - V_TARGET_ROW < 0) THEN
		
		V_COUNTER_COL := V_SOURCE_COLUMN_NUM+1;
		V_COUNTER_ROW := V_SOURCE_ROW+1;

		V_COUNT_FIRST := V_SOURCE_ROW+1;
		V_COUNT_LAST := V_TARGET_ROW;
		FOR CONT IN V_COUNT_FIRST..V_COUNT_LAST LOOP
		   SELECT PIEZA INTO V_TARGET_VALUE FROM BOARD WHERE FILA = V_COUNTER_ROW AND COLUMNA = COL_NUM_TO_LETTER(V_COUNTER_COL);

		   --PIEZAS MAYÚSCULAS
		   IF(P_PIECE = 'A') THEN		
			IF (V_TARGET_VALUE='a' OR V_TARGET_VALUE='p' OR V_TARGET_VALUE='q' OR V_TARGET_VALUE='t' OR V_TARGET_VALUE='c' OR V_TARGET_VALUE='k' OR V_TARGET_VALUE = ' ') AND (V_COUNTER_ROW = V_TARGET_ROW AND V_COUNTER_COL = V_TARGET_COLUMN) THEN
				UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
                U		PDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   		DBMS_OUTPUT.PUT_LINE('Act. (Alfil-A-Diagonal-sup-der)');
				EXIT;
			ELSIF((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')) AND (V_TARGET_VALUE != ' ') THEN
				DBMS_OUTPUT.PUT_LINE('Hay una ficha amiga bloqueando el espacio. (Alfil-A-Diagonal-sup-der)');
				EXIT;
			ELSE
				DBMS_OUTPUT.PUT_LINE('No se pudo act. (Alfil-A-Diagonal-sup-der)');
			END IF;		
		ELSIF(P_PIECE = 'a') THEN
			IF ( (V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K') OR (V_TARGET_VALUE = ' ') ) AND (V_COUNTER_ROW = V_TARGET_ROW AND V_COUNTER_COL = V_TARGET_COLUMN)  THEN
				UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
                U		PDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   		DBMS_OUTPUT.PUT_LINE('Act. (Alfil-a-Diagonal-sup-der)');
				EXIT;
			ELSIF((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')) AND (V_TARGET_VALUE != ' ') THEN
				DBMS_OUTPUT.PUT_LINE('Hay una ficha amiga bloqueando el espacio. (Alfil-a-Diagonal-sup-der)');
				EXIT;
			ELSE
				DBMS_OUTPUT.PUT_LINE('No se pudo act. (Alfil-a-Diagonal-sup-der)');
			END IF;	

		  ELSE
			DBMS_OUTPUT.PUT_LINE('No se pudo realizar el movimiento de alfil (Alfil-Diagonal-sup-der)');
		  END IF;

		END LOOP;

	--Desplazamiento diagonal superior izquierdo
	ELSIF(V_SOURCE_COLUMN_NUM - V_TARGET_COLUMN_NUM > 0 AND V_SOURCE_ROW - V_TARGET_ROW < 0) THEN
		V_COUNTER_COL := V_SOURCE_COLUMN_NUM-1;
		V_COUNTER_ROW := V_SOURCE_ROW+1;
		
		V_COUNT_FIRST := V_SOURCE_COLUMN_NUM;
		V_COUNT_LAST := V_TARGET_COLUMN_NUM;

		FOR CONT IN V_COUNT_LAST..V_COUNT_FIRST LOOP
		   SELECT PIEZA INTO V_TARGET_VALUE FROM BOARD WHERE FILA = V_COUNTER_ROW AND COLUMNA = COL_NUM_TO_LETTER(V_COUNTER_COL);

		   --PIEZAS MAYÚSCULAS
		   IF(P_PIECE = 'A') THEN		
			IF (V_TARGET_VALUE='a' OR V_TARGET_VALUE='p' OR V_TARGET_VALUE='q' OR V_TARGET_VALUE='t' OR V_TARGET_VALUE='c' OR V_TARGET_VALUE='k' OR V_TARGET_VALUE = ' ') AND (V_COUNTER_ROW = V_TARGET_ROW AND V_COUNTER_COL = V_TARGET_COLUMN_NUM) THEN
				UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
                U		PDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   		DBMS_OUTPUT.PUT_LINE('Act. (Alfil-A-Diagonal-sup-izq)');
				EXIT;
			ELSIF((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')  OR (V_TARGET_VALUE = ' ')) AND (V_TARGET_VALUE != ' ') THEN
				DBMS_OUTPUT.PUT_LINE('Hay una ficha amiga bloqueando el espacio. (Alfil-A-Diagonal-sup-izq)');
				EXIT;
			ELSE
				DBMS_OUTPUT.PUT_LINE('No se pudo act. (Alfil-A-Diagonal-sup-izq)');
			END IF;		
		ELSIF(P_PIECE = 'a') THEN
			IF ( (V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K') ) AND (V_COUNTER_ROW = V_TARGET_ROW AND V_COUNTER_COL = V_TARGET_COLUMN_NUM)  THEN
				UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
                U		PDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   		DBMS_OUTPUT.PUT_LINE('Act. (Alfil-a-Diagonal-sup-izq)');
				EXIT;
			ELSIF((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')) AND (V_TARGET_VALUE != ' ') THEN
				DBMS_OUTPUT.PUT_LINE('Hay una ficha amiga bloqueando el espacio. (Alfil-a-Diagonal-sup-izq)');
				EXIT;
			ELSE
				DBMS_OUTPUT.PUT_LINE('No se pudo act. (Alfil-a-Diagonal-sup-izq)');
			END IF;	

		  ELSE
			DBMS_OUTPUT.PUT_LINE('No se pudo realizar el movimiento de alfil (Alfil-Diagonal-sup-izq)');
		  END IF;
		  V_COUNTER_COL := V_COUNTER_COL - 1;
		  V_COUNTER_ROW := V_COUNTER_ROW + 1;
		END LOOP;

	--Desplazamiento diagonal inferior derecho
	ELSIF(V_SOURCE_COLUMN_NUM - V_TARGET_COLUMN_NUM < 0 AND V_SOURCE_ROW - V_TARGET_ROW > 0) THEN
		
		V_COUNTER_ROW := V_SOURCE_ROW-1;
		
		V_COUNT_FIRST := V_SOURCE_COLUMN_NUM+1;
		V_COUNT_LAST := V_TARGET_COLUMN_NUM;

		FOR CONT IN V_COUNT_FIRST..V_COUNT_LAST LOOP
		   SELECT PIEZA INTO V_TARGET_VALUE FROM BOARD WHERE FILA = V_COUNTER_ROW AND COLUMNA = COL_NUM_TO_LETTER(CONT);

		   --PIEZAS MAYÚSCULAS
		   IF(P_PIECE = 'A') THEN		
			IF (V_TARGET_VALUE='a' OR V_TARGET_VALUE='p' OR V_TARGET_VALUE='q' OR V_TARGET_VALUE='t' OR V_TARGET_VALUE='c' OR V_TARGET_VALUE='k' OR V_TARGET_VALUE = ' ') AND (V_COUNTER_ROW = V_TARGET_ROW AND CONT = V_TARGET_COLUMN_NUM) THEN
				UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
                U		PDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   		DBMS_OUTPUT.PUT_LINE('Act. (Alfil-A-Diagonal-inf-der)');
				EXIT;
			ELSIF((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')) AND (V_TARGET_VALUE != ' ') THEN
				DBMS_OUTPUT.PUT_LINE('Hay una ficha amiga bloqueando el espacio. (Alfil-A-Diagonal-inf-der)');
				EXIT;
			ELSE
				DBMS_OUTPUT.PUT_LINE('No se pudo act. (Alfil-A-Diagonal-inf-der)');
			END IF;		
		ELSIF(P_PIECE = 'a') THEN
			IF ( (V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')  OR (V_TARGET_VALUE = ' ') ) AND (V_COUNTER_ROW = V_TARGET_ROW AND CONT = V_TARGET_COLUMN_NUM)  THEN
				UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
                U		PDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   		DBMS_OUTPUT.PUT_LINE('Act. (Alfil-a-Diagonal-inf-der)');
				EXIT;
			ELSIF((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')) AND (V_TARGET_VALUE != ' ') THEN
				DBMS_OUTPUT.PUT_LINE('Hay una ficha amiga bloqueando el espacio. (Alfil-a-Diagonal-inf-der)');
				EXIT;
			ELSE
				DBMS_OUTPUT.PUT_LINE('No se pudo act. (Alfil-a-Diagonal-inf-der)');
			END IF;	

		  ELSE
			DBMS_OUTPUT.PUT_LINE('No se pudo realizar el movimiento de alfil (Alfil-Diagonal-inf-der)');
		  END IF;
		 
		  V_COUNTER_ROW := V_COUNTER_ROW - 1;
		END LOOP;

	--Desplazamiento diagonal inferior izquierdo
	ELSIF(V_SOURCE_COLUMN_NUM - V_TARGET_COLUMN_NUM > 0 AND V_SOURCE_ROW - V_TARGET_ROW > 0) THEN
		V_COUNTER_ROW := V_SOURCE_ROW-1;
		V_COUNTER_COL := V_SOURCE_COLUMN_NUM-1;
		V_COUNT_FIRST := V_SOURCE_ROW;
		V_COUNT_LAST := V_TARGET_ROW;

		--DBMS_OUTPUT.PUT_LINE('ENTRÓ A-Diagonal-inf-izq');
		FOR CONT IN V_COUNT_LAST..V_COUNT_FIRST LOOP
		   SELECT PIEZA INTO V_TARGET_VALUE FROM BOARD WHERE FILA = V_COUNTER_ROW AND COLUMNA = COL_NUM_TO_LETTER(V_COUNTER_COL);
		   
		   --PIEZAS MAYÚSCULAS
		   IF(P_PIECE = 'A') THEN		
			IF (V_TARGET_VALUE='a' OR V_TARGET_VALUE='p' OR V_TARGET_VALUE='q' OR V_TARGET_VALUE='t' OR V_TARGET_VALUE='c' OR V_TARGET_VALUE='k' OR V_TARGET_VALUE = ' ') AND (V_COUNTER_ROW = V_TARGET_ROW AND V_COUNTER_COL = V_TARGET_COLUMN_NUM) THEN
				UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
                U		PDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   		DBMS_OUTPUT.PUT_LINE('Act. (Alfil-A-Diagonal-inf-izq)');
				EXIT;
			ELSIF((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')) AND (V_TARGET_VALUE != ' ') THEN
				DBMS_OUTPUT.PUT_LINE('Hay una ficha amiga bloqueando el espacio. (Alfil-A-Diagonal-inf-izq)');
				EXIT;
			ELSE
				DBMS_OUTPUT.PUT_LINE('No se pudo act. (Alfil-A-Diagonal-inf-izq)');
			END IF;		
		ELSIF(P_PIECE = 'a') THEN
			IF ( (V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K') OR (V_TARGET_VALUE = ' ') ) AND (V_COUNTER_ROW = V_TARGET_ROW AND V_COUNTER_COL = V_TARGET_COLUMN_NUM)  THEN
				UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
                U		PDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;	
		   		DBMS_OUTPUT.PUT_LINE('Act. (Alfil-a-Diagonal-inf-izq)');
				EXIT;
			ELSIF((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')) AND (V_TARGET_VALUE != ' ') THEN
				DBMS_OUTPUT.PUT_LINE('Hay una ficha amiga bloqueando el espacio. (Alfil-a-Diagonal-inf-izq)');
				EXIT;
			ELSE
				DBMS_OUTPUT.PUT_LINE('No se pudo act. (Alfil-a-Diagonal-inf-izq)');
			END IF;	

		  ELSE
			DBMS_OUTPUT.PUT_LINE('No se pudo realizar el movimiento de alfil (Alfil-Diagonal-inf-izq)');
		  END IF;
		  V_COUNTER_ROW := V_COUNTER_ROW - 1;
		  V_COUNTER_COL := V_COUNTER_COL - 1;
		END LOOP;

	ELSE
		DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento de alfil.');
	END IF;
 END MOVE_A;

--REY
 PROCEDURE MOVE_K (P_CORD_SOURCE VARCHAR2, P_CORD_TARGET VARCHAR2, P_PIECE VARCHAR2, P_STATUS_PIECE VARCHAR2 ) IS
        V_SOURCE_ROW    VARCHAR2(1);--2
        V_SOURCE_COLUMN VARCHAR2(1);--A
        V_TARGET_ROW    VARCHAR2(1);--3
        V_TARGET_COLUMN VARCHAR2(1);--A
        V_PIECE_SOURCE VARCHAR2(1);
        V_SOURCE_COLUMN_NUM NUMBER;
        V_TARGET_COLUMN_NUM NUMBER;
	--LOCAL SON PARA VALIDAR POSIBLES MOVIMIENTOS
	/*V_COUNT_FIRST NUMBER;
	V_COUNT_LAST NUMBER;
	V_COUNTER NUMBER;*/
	V_TARGET_VALUE VARCHAR2(1);
    
    --GUARDAR PIEZAS ALREDEDOR DEL ESPACIO DE DONDE SE QUIERE MOVER
    V_PIEZA_ARRIBA VARCHAR2(1);
    V_PIEZA_ABAJO VARCHAR2(1);
    V_PIEZA_IZQUIERDA VARCHAR2(1);
    V_PIEZA_DERECHA VARCHAR2(1);
    V_PIEZA_DIAGONAL_DERECHA_ARRIBA VARCHAR2(1);
    V_PIEZA_DIAGONAL_DERECHA_ABAJO VARCHAR2(1);
    V_PIEZA_DIAGONAL_IZQUIERDA_ARRIBA VARCHAR2(1);
    V_PIEZA_DIAGONAL_IZQUIERDA_ABAJO VARCHAR2(1);
    
   BEGIN
	--gets the separate cords
    SELECT SUBSTR(P_CORD_SOURCE,1,1) INTO V_SOURCE_COLUMN FROM DUAL;
    SELECT SUBSTR(P_CORD_TARGET,1,1) INTO V_TARGET_COLUMN FROM DUAL;

    SELECT SUBSTR(P_CORD_SOURCE,2,1) INTO V_SOURCE_ROW FROM DUAL;
    SELECT SUBSTR(P_CORD_TARGET,2,1) INTO V_TARGET_ROW FROM DUAL;

	--nuevas columnas a números
	V_SOURCE_COLUMN_NUM := COL_LETTER_TO_NUM(V_SOURCE_COLUMN);
	V_TARGET_COLUMN_NUM := COL_LETTER_TO_NUM(V_TARGET_COLUMN);

 	SELECT PIEZA INTO V_TARGET_VALUE FROM BOARD WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;
    --PIEZA ARRIBA
    SELECT PIEZA INTO V_PIEZA_ARRIBA FROM BOARD WHERE FILA = V_TARGET_ROW+1 AND COLUMNA =V_TARGET_COLUMN;
    --PIEZA ABAJO
    SELECT PIEZA INTO V_PIEZA_ABAJO FROM BOARD WHERE FILA = V_TARGET_ROW-1 AND COLUMNA =V_TARGET_COLUMN;
    --PIEZA IZQUIERDA
    SELECT PIEZA INTO V_PIEZA_IZQUIERDA FROM BOARD WHERE FILA = V_TARGET_ROW AND COLUMNA = COL_NUM_TO_LETTER(V_TARGET_COLUMN_NUM-1);
    --PIEZA DERECHA
    SELECT PIEZA INTO V_PIEZA_DERECHA FROM BOARD WHERE FILA = V_TARGET_ROW AND COLUMNA =COL_NUM_TO_LETTER(V_TARGET_COLUMN_NUM+1);
    --PIEZA DERECHA ARRIBA
    SELECT PIEZA INTO V_PIEZA_DIAGONAL_DERECHA_ARRIBA FROM BOARD WHERE FILA = V_TARGET_ROW+1 AND COLUMNA =COL_NUM_TO_LETTER(V_TARGET_COLUMN_NUM+1);
    --PIEZA DERECHA ABAJO
    SELECT PIEZA INTO V_PIEZA_DIAGONAL_DERECHA_ABAJO FROM BOARD WHERE FILA = V_TARGET_ROW-1 AND COLUMNA =COL_NUM_TO_LETTER(V_TARGET_COLUMN_NUM+1);
    --PIEZA IZQUIERDA ARIIBA
    SELECT PIEZA INTO V_PIEZA_DIAGONAL_IZQUIERDA_ARRIBA FROM BOARD WHERE FILA = V_TARGET_ROW+1 AND COLUMNA = COL_NUM_TO_LETTER(V_TARGET_COLUMN_NUM-1);
    --PIEZA IZQUIERDA ABAJO
    SELECT PIEZA INTO V_PIEZA_DIAGONAL_IZQUIERDA_ABAJO FROM BOARD WHERE FILA = V_TARGET_ROW-1 AND COLUMNA = COL_NUM_TO_LETTER(V_TARGET_COLUMN_NUM-1);
     
--PRIMERO VALIDAR QUE SEA UN ESPACIO MAS HACIA CUALQUIER LADO
 IF ((V_SOURCE_ROW+1 = V_TARGET_ROW)  OR (V_SOURCE_ROW-1 = V_TARGET_ROW)  OR (V_SOURCE_COLUMN_NUM+1 = V_TARGET_COLUMN_NUM) OR (V_SOURCE_COLUMN_NUM-1 =V_TARGET_COLUMN_NUM))  
 OR  ((V_SOURCE_ROW + 1 = V_TARGET_ROW OR V_SOURCE_ROW - 1 = V_TARGET_ROW) AND (V_SOURCE_COLUMN_NUM + 1 = V_TARGET_COLUMN_NUM OR V_SOURCE_COLUMN_NUM-1 = V_TARGET_COLUMN_NUM))
  
 THEN
  
--si llega 
  IF P_PIECE = 'K' THEN
    --QUE EL REY NO QUEDE EN PELIGRO
     IF((V_PIEZA_ARRIBA!='a')OR (V_PIEZA_ARRIBA!='p') OR (V_PIEZA_ARRIBA!='q') OR (V_PIEZA_ARRIBA!='t')OR (V_PIEZA_ARRIBA!='c')OR (V_PIEZA_ARRIBA!='k'))  
     OR (V_PIEZA_DERECHA!='a'OR (V_PIEZA_DERECHA!='p') OR (V_PIEZA_DERECHA!='q') OR (V_PIEZA_DERECHA!='t')OR (V_PIEZA_DERECHA!='c')OR (V_PIEZA_DERECHA!='k') ) 
     OR (V_PIEZA_IZQUIERDA!='a'OR (V_PIEZA_IZQUIERDA='p') OR (V_PIEZA_IZQUIERDA!='q') OR (V_PIEZA_IZQUIERDA!='t')OR (V_PIEZA_IZQUIERDA='c')OR (V_PIEZA_IZQUIERDA!='k') )   
     OR (V_PIEZA_DIAGONAL_DERECHA_ARRIBA !='a' OR (V_PIEZA_DIAGONAL_DERECHA_ARRIBA !='p') OR (V_PIEZA_DIAGONAL_DERECHA_ARRIBA !='q') OR (V_PIEZA_DIAGONAL_DERECHA_ARRIBA !='t')OR (V_PIEZA_DIAGONAL_DERECHA_ARRIBA !='c')OR (V_PIEZA_DIAGONAL_DERECHA_ARRIBA !='k')) 
     OR (V_PIEZA_DIAGONAL_DERECHA_ABAJO!='a' OR (V_PIEZA_DIAGONAL_DERECHA_ABAJO!='p') OR (V_PIEZA_DIAGONAL_DERECHA_ABAJO!='q') OR (V_PIEZA_DIAGONAL_DERECHA_ABAJO!='t')OR (V_PIEZA_DIAGONAL_DERECHA_ABAJO='c')OR (V_PIEZA_DIAGONAL_DERECHA_ABAJO!='k')) 
     OR (V_PIEZA_DIAGONAL_IZQUIERDA_ARRIBA!='a' OR (V_PIEZA_DIAGONAL_IZQUIERDA_ARRIBA!='p') OR (V_PIEZA_DIAGONAL_IZQUIERDA_ARRIBA!='q') OR (V_PIEZA_DIAGONAL_IZQUIERDA_ARRIBA!='t')OR (V_PIEZA_DIAGONAL_IZQUIERDA_ARRIBA!='c')OR (V_PIEZA_DIAGONAL_IZQUIERDA_ARRIBA!='k')) 
     OR (V_PIEZA_DIAGONAL_IZQUIERDA_ABAJO)!='a' OR (V_PIEZA_DERECHA!='p') OR (V_PIEZA_DIAGONAL_IZQUIERDA_ABAJO!='q') OR (V_PIEZA_DIAGONAL_IZQUIERDA_ABAJO!='t')OR (V_PIEZA_DIAGONAL_IZQUIERDA_ABAJO!='c')OR (V_PIEZA_DIAGONAL_IZQUIERDA_ABAJO!='k')
     THEN
      DBMS_OUTPUT.PUT_LINE('MOVIMIENTO NO VÁLIDO');--CAMBIAR EL TURNO
    ELSE
      IF ((V_TARGET_VALUE='a')OR (V_TARGET_VALUE='p') OR (V_TARGET_VALUE='q') OR (V_TARGET_VALUE='t')OR (V_TARGET_VALUE='c')OR (V_TARGET_VALUE='k')OR (V_TARGET_VALUE = ' ')) THEN
               DBMS_OUTPUT.PUT_LINE(V_TARGET_VALUE);
               UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
               UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;
               DBMS_OUTPUT.PUT_LINE('MOVIMIENTO REALIZADO CON ÉXITO');
         
           ELSE
             DBMS_OUTPUT.PUT_LINE('Hay una ficha amiga bloqueando el espacio.');
           END IF;
     END IF; 
     
     
          
  ELSIF P_PIECE ='k' THEN
    IF((V_PIEZA_ARRIBA!='A')OR (V_PIEZA_ARRIBA!='P') OR (V_PIEZA_ARRIBA!='Q') OR (V_PIEZA_ARRIBA!='T')OR (V_PIEZA_ARRIBA!='C')OR (V_PIEZA_ARRIBA!='K'))  
     OR (V_PIEZA_DERECHA!='A'OR (V_PIEZA_DERECHA!='P') OR (V_PIEZA_DERECHA!='Q') OR (V_PIEZA_DERECHA!='T')OR (V_PIEZA_DERECHA!='C')OR (V_PIEZA_DERECHA!='K') ) 
     OR (V_PIEZA_IZQUIERDA!='A'OR (V_PIEZA_IZQUIERDA='P') OR (V_PIEZA_IZQUIERDA!='Q') OR (V_PIEZA_IZQUIERDA!='T')OR (V_PIEZA_IZQUIERDA='C')OR (V_PIEZA_IZQUIERDA!='K') )   
     OR (V_PIEZA_DIAGONAL_DERECHA_ARRIBA !='A' OR (V_PIEZA_DIAGONAL_DERECHA_ARRIBA !='P') OR (V_PIEZA_DIAGONAL_DERECHA_ARRIBA !='Q') OR (V_PIEZA_DIAGONAL_DERECHA_ARRIBA !='T')OR (V_PIEZA_DIAGONAL_DERECHA_ARRIBA !='C')OR (V_PIEZA_DIAGONAL_DERECHA_ARRIBA !='K')) 
     OR (V_PIEZA_DIAGONAL_DERECHA_ABAJO!='A' OR (V_PIEZA_DIAGONAL_DERECHA_ABAJO!='P') OR (V_PIEZA_DIAGONAL_DERECHA_ABAJO!='Q') OR (V_PIEZA_DIAGONAL_DERECHA_ABAJO!='T')OR (V_PIEZA_DIAGONAL_DERECHA_ABAJO='C')OR (V_PIEZA_DIAGONAL_DERECHA_ABAJO!='K')) 
     OR (V_PIEZA_DIAGONAL_IZQUIERDA_ARRIBA!='A' OR (V_PIEZA_DIAGONAL_IZQUIERDA_ARRIBA!='P') OR (V_PIEZA_DIAGONAL_IZQUIERDA_ARRIBA!='Q') OR (V_PIEZA_DIAGONAL_IZQUIERDA_ARRIBA!='T')OR (V_PIEZA_DIAGONAL_IZQUIERDA_ARRIBA!='C')OR (V_PIEZA_DIAGONAL_IZQUIERDA_ARRIBA!='K')) 
     OR (V_PIEZA_DIAGONAL_IZQUIERDA_ABAJO)!='A' OR (V_PIEZA_DERECHA!='P') OR (V_PIEZA_DIAGONAL_IZQUIERDA_ABAJO!='Q') OR (V_PIEZA_DIAGONAL_IZQUIERDA_ABAJO!='T')OR (V_PIEZA_DIAGONAL_IZQUIERDA_ABAJO!='C')OR (V_PIEZA_DIAGONAL_IZQUIERDA_ABAJO!='K')
     THEN
     DBMS_OUTPUT.PUT_LINE('MOVIMIENTO NO VÁLIDO');--CAMBIAR EL TURNO
    ELSE
        IF ((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')OR (V_TARGET_VALUE = ' ')) THEN
         UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
         UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;
         DBMS_OUTPUT.PUT_LINE('MOVIMIENTO REALIZADO CON ÉXITO');
          ELSE
         DBMS_OUTPUT.PUT_LINE('Hay una ficha amiga bloqueando el espacio.');
       END IF;
    END IF;
 END IF;
         
 ELSE
  DBMS_OUTPUT.PUT_LINE('MOVIMIENTO NO VÁLIDO');--CAMBIAR EL TURNO

 END IF;
END MOVE_K;


--REINA
 PROCEDURE MOVE_Q (P_CORD_SOURCE VARCHAR2, P_CORD_TARGET VARCHAR2, P_PIECE VARCHAR2, P_STATUS_PIECE VARCHAR2 ) IS
        V_SOURCE_ROW    VARCHAR2(1);--2
        V_SOURCE_COLUMN VARCHAR2(1);--A
        V_TARGET_ROW    VARCHAR2(1);--3
        V_TARGET_COLUMN VARCHAR2(1);--A
        V_PIECE_SOURCE VARCHAR2(1);
        V_TARGET_VALUE VARCHAR2(1);
 BEGIN
    SELECT SUBSTR(P_CORD_SOURCE,1,1) INTO V_SOURCE_COLUMN FROM DUAL;
    SELECT SUBSTR(P_CORD_TARGET,1,1) INTO V_TARGET_COLUMN FROM DUAL;

    SELECT SUBSTR(P_CORD_SOURCE,2,1) INTO V_SOURCE_ROW FROM DUAL;
    SELECT SUBSTR(P_CORD_TARGET,2,1) INTO V_TARGET_ROW FROM DUAL;
    
    SELECT PIEZA INTO V_TARGET_VALUE FROM BOARD WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;
    IF (P_PIECE='R')THEN
      IF ((V_TARGET_VALUE='a')OR (V_TARGET_VALUE='p') OR (V_TARGET_VALUE='q') OR (V_TARGET_VALUE='t')OR (V_TARGET_VALUE='c')OR (V_TARGET_VALUE='k')OR (V_TARGET_VALUE = ' ')) THEN
      UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
      UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;
      ELSE
         DBMS_OUTPUT.PUT_LINE('Hay una ficha amiga bloqueando el espacio.');
      END IF;
    ELSIF (P_PIECE='r')  THEN
     IF ((V_TARGET_VALUE='A')OR (V_TARGET_VALUE='P') OR (V_TARGET_VALUE='Q') OR (V_TARGET_VALUE='T')OR (V_TARGET_VALUE='C')OR (V_TARGET_VALUE='K')OR (V_TARGET_VALUE = ' ')) THEN
      UPDATE BOARD SET PIEZA = ' ' WHERE FILA = V_SOURCE_ROW AND COLUMNA = V_SOURCE_COLUMN;
      UPDATE BOARD SET PIEZA = P_PIECE WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;
      ELSE
         DBMS_OUTPUT.PUT_LINE('Hay una ficha amiga bloqueando el espacio.');
      END IF;
    
    END IF;
 DBMS_OUTPUT.PUT_LINE('FALTA');
 END MOVE_Q;

END MOVES_PQ01;
/