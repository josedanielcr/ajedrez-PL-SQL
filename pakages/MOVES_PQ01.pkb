create or replace NONEDITIONABLE PACKAGE BODY MOVES_PQ01 IS

   --FUNCION PARA CONVERTIR LAS COLUMNAS DE BOARD A NÚMERO PARA MEJOR MANEJO INTERNO DE VALIDACIONES
   FUNCTION COL_LETTER_TO_NUM(COL VARCHAR2) RETURN NUMBER IS
	NEW_NUM NUMBER;
   BEGIN
	IF(COL == 'A') THEN
	   NEW_NUM := 1;
	ELSEIF(COL == 'B') THEN
	   NEW_NUM:= 2;	
  	ELSEIF(COL == 'C') THEN
	   NEW_NUM:= 3;	
	ELSEIF(COL == 'D') THEN
	   NEW_NUM:= 4;	
	ELSEIF(COL == 'E') THEN
	   NEW_NUM:= 5;	
	ELSEIF(COL == 'F') THEN
	   NEW_NUM:= 6;	
	ELSEIF(COL == 'G') THEN
	   NEW_NUM:= 7;	
	ELSE
	   NEW_NUM := 8
	END IF;    
   RETURN NEW_NUM;
   END COL_LETTER_TO_NUM;

--FUNCION PARA CONVERTIR LAS COLUMNAS DE BOARD A LETRAS PARA ACTUALIZAR EN BOARD
   FUNCTION COL_NUM_TO_LETTER(COL NUMBER) RETURN VARCHAR2 IS
	NEW_COL VARCHAR2;
   BEGIN
	IF(COL == 1) THEN
	   NEW_COL := 'A';
	ELSEIF(COL == 2) THEN
	   NEW_COL:= 'B';	
  	ELSEIF(COL == 'C') THEN
	   NEW_COL:= 'C';	
	ELSEIF(COL == 4) THEN
	   NEW_COL:= 'D';	
	ELSEIF(COL == 5) THEN
	   NEW_COL:= 'E';	
	ELSEIF(COL == 6) THEN
	   NEW_COL:= 'F';	
	ELSEIF(COL == 7) THEN
	   NEW_COL:= 'G';	
	ELSE
	   NEW_COL := 'H';
	END IF;    
   RETURN NEW_COL;
   END COL_NUM_TO_LETTER;

   PROCEDURE MOVE_PIECE(P_CORD_SOURCE VARCHAR2, P_CORD_TARGET VARCHAR2) IS
   --P_CORD_SOURCE= A2 P_CORD_TARGET= A3 ejemplo
        V_SOURCE_ROW    VARCHAR2(1);--2
        V_SOURCE_COLUMN VARCHAR2(1);--A
        V_TARGET_ROW    VARCHAR2(1);--3
        V_TARGET_COLUMN VARCHAR2(1);--A
        V_PIECE VARCHAR2(1);
	V_STATUS_PIECE VARCHAR2(1);

    BEGIN

        --gets the separate cords
        SELECT SUBSTR(P_CORD_SOURCE,1,1) INTO V_SOURCE_COLUMN FROM DUAL;
        SELECT SUBSTR(P_CORD_SOURCE,2,1) INTO V_SOURCE_ROW FROM DUAL;
        SELECT SUBSTR(P_CORD_TARGET,1,1) INTO V_TARGET_COLUMN FROM DUAL;
        SELECT SUBSTR(P_CORD_TARGET,2,1) INTO V_TARGET_ROW FROM DUAL;
        
        SELECT PIEZA INTO V_PIECE FROM BOARD WHERE FILA= V_SOURCE_ROW AND COLUMNA= V_SOURCE_COLUMN;
        IF(V_PIECE IS NULL) THEN
        DBMS_OUTPUT.PUT_LINE('El campo seleccionado no contiene una pieza');
        
        ELSE 
          --UPDATE BOARD SET PIEZA = NULL WHERE FILA= V_SOURCE_ROW AND COLUMNA= V_SOURCE_COLUMN;
          --UPDATE BOARD SET PIEZA = V_PIEZA WHERE FILA= V_TARGET_ROW AND COLUMNA= V_TARGET_COLUMN;

	  --obtener estado de la ficha de la tabla de estados de piezas
	  SELECT STATUS INRO V_STATUS_PIECE FROM PIECES_STATUS WHERE CORD = P_CORD_SOURCE;
	  
	  --Peon
          IF (V_PIECE like 'P','p')THEN
	    MOVES_PQ01.MOVE_P(P_CORD_SOUCE,P_CORD_TARGET,V_PIECE,V_STATUS_PICE);   
	  --Torre      
          ELSEIF (V_PIECE like 'T','t')THEN
	    MOVES_PQ01.MOVE_T(P_CORD_SOUCE,P_CORD_TARGET,V_PIECE,V_STATUS_PICE);
	  --Caballo         
          ELSEIF (V_PIECE like 'C','c')THEN
	    MOVES_PQ01.MOVE_C(P_CORD_SOUCE,P_CORD_TARGET,V_PIECE,V_STATUS_PICE);    
	  --Alfil     
          ELSEIF (V_PIECE like 'A','a')THEN
	    MOVES_PQ01.MOVE_A(P_CORD_SOUCE,P_CORD_TARGET,V_PIECE,V_STATUS_PICE);
	  --Rey         
          ELSEIF (V_PIECE like 'K','k')THEN
	    MOVES_PQ01.MOVE_K(P_CORD_SOUCE,P_CORD_TARGET,V_PIECE,V_STATUS_PICE);         
          --Reina
	  ELSE 
	    MOVES_PQ01.MOVE_Q(P_CORD_SOUCE,P_CORD_TARGET,V_PIECE,V_STATUS_PICE);
	  END IF;
        
        END IF;
        
        
        
        -- dependiendo de la pieza llamo a uno de los procedimientos para ver como se puede mover
    END MOVE_PIECE;

   --MOVER PEON
   PROCEDURE MOVE_P(P_CORD_SOURCE VARCHAR2, P_CORD_TARGET VARCHAR2, P_PIECE VARCHAR2, P_STATUS_PIECE VARCHAR2) IS
	V_SOURCE_ROW    VARCHAR2(1);--2
        V_SOURCE_COLUMN VARCHAR2(1);--A
        V_TARGET_ROW    VARCHAR2(1);--3
        V_TARGET_COLUMN VARCHAR2(1);--A
	--LOCAL SON PARA VALIDAR POSIBLES MOVIMIENTOS
	V_ROW_LOCAL VARCHAR2(1);
	V_COL_LOCAL VARCHAR2(1);
	V_TARGET_VALUE VARCHAR2(1);
   BEGIN
	--gets the separate cords
        --SELECT SUBSTR(P_CORD_SOURCE,1,1) INTO V_SOURCE_COLUMN FROM DUAL;
        --SELECT SUBSTR(P_CORD_TARGET,1,1) INTO V_TARGET_COLUMN FROM DUAL;

	SELECT SUBSTR(P_CORD_SOURCE,2,1) INTO V_SOURCE_ROW FROM DUAL;
        SELECT SUBSTR(P_CORD_TARGET,2,1) INTO V_TARGET_ROW FROM DUAL;
	
	--OBTENER PIEZA DE DESTINO INDICADO
	SELECT PIEZA INTO V_TARGET_VALUE FROM BOARD WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;

	--nuevas columnas a números
	V_SOURCE_COLUMN := TO_NUMBER(COL_LETTER_TO_NUM(SUBSTR(P_CORD_SOURCE,1,1)));
	V_TARGET_COLUMN := TO_NUMBER(COL_LETTER_TO_NUM(SUBSTR(P_CORD_TARGET,1,1)));

 	SELECT PIEZA INTO V_TARGET_VALUE FROM BOARD WHERE FILA = V_TARGET_ROW AND COLUMNA = V_TARGET_COLUMN;

	--DESPLAZAMIENTO 2 ESPACIOS
	IF (P_STATUS_PIECE == 'F')THEN
	    IF(P_PIECE == 'P') THEN
		V_ROW_LOCAL := V_SOURCE_ROW + 2;
		IF(V_ROW_LOCAL == V_TARGET_COLUMN AND V_TARGET_VALUE == '') THEN
		   UPDATE PIECES_STATUS SET CORD = P_CORD_TARGET, SET STATUS = 'T' SET WHERE CORD = P_CORD_SOURCE;
		   UPDATE BOARD SET PIEZA = NULL WHERE FILA= V_SOURCE_ROW AND COLUMNA= V_SOURCE_COLUMN;
        	   UPDATE BOARD SET PIEZA = V_PIEZA WHERE FILA= V_TARGET_ROW AND COLUMNA= V_TARGET_COLUMN;
		ELSE
		   DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. (Peon-2M-P)');
		END IF;
	    END IF;
	    IF(P_PIECE == 'p') THEN
		V_ROW_LOCAL := V_SOURCE_ROW - 2;
		IF(V_ROW_LOCAL == V_TARGET_COLUMN AND V_TARGET_VALUE == '') THEN
		   UPDATE BOARD SET PIEZA = NULL WHERE FILA= V_SOURCE_ROW AND COLUMNA= V_SOURCE_COLUMN;
        	   UPDATE BOARD SET PIEZA = V_PIEZA WHERE FILA= V_TARGET_ROW AND COLUMNA= V_TARGET_COLUMN;
		ELSE
		   DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. (Peon-2M-p)');
		END IF;
	    END IF;
	--DESPLAZAMIENTO 1 ESPACIO
	ELSE IF (P_STATUS_PIECE == 'T') THEN
	    IF(P_PIECE == 'P') THEN
	        V_ROW_LOCAL := V_SOURCE_ROW + 1;
		    IF(V_ROW_LOCAL == V_TARGET_ROW AND V_TARGET_VALUE == '') THEN
		       UPDATE BOARD SET PIEZA = NULL WHERE FILA= V_SOURCE_ROW AND COLUMNA= V_SOURCE_COLUMN;
        	       UPDATE BOARD SET PIEZA = V_PIEZA WHERE FILA= V_TARGET_ROW AND COLUMNA= V_TARGET_COLUMN;
		    ELSE
			DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. (Peon-1M-P)');
		    END IF;
	    END IF;
	    IF(P_PIECE == 'p') THEN
	        V_ROW_LOCAL := V_SOURCE_ROW - 1;
		    IF(V_ROW_LOCAL == V_TARGET_ROW AND V_TARGET_VALUE == '') THEN
		       UPDATE BOARD SET PIEZA = NULL WHERE FILA= V_SOURCE_ROW AND COLUMNA= V_SOURCE_COLUMN;
        	       UPDATE BOARD SET PIEZA = V_PIEZA WHERE FILA= V_TARGET_ROW AND COLUMNA= V_TARGET_COLUMN;
		    ELSE
			DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. (Peon-1M-p)');
		    END IF;
	    END IF;

	--DESPLAZAMIENTO DIAGONAL PARA ELIMINAR PIEZA
	ELSE 
	   IF(P_PIECE == 'P') THEN
	      
	      IF(V_SOURCE_ROW + 1 == V_TARGET_ROW AND V_TARGET_VALUE == '') AND (COL_NUM_TO_LETTER(COL_LETTER_TO_NUM(V_SOURCE_COLUMN)) + 1 == V_TARGET_COLUMN OR COL_NUM_TO_LETTER(COL_LETTER_TO_NUM(V_SOURCE_COLUMN)) - 1 == V_TARGET_COLUMN) THEN
		 UPDATE BOARD SET PIEZA = NULL WHERE FILA= V_SOURCE_ROW AND COLUMNA= V_SOURCE_COLUMN;
        	 UPDATE BOARD SET PIEZA = V_PIEZA WHERE FILA= V_TARGET_ROW AND COLUMNA= V_TARGET_COLUMN;
	      ELSE
		DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. (Peon-DIAG-P)');
	      END IF;
	   END IF;
	   IF(P_PIECE == 'p') THEN
	      
	      IF(V_SOURCE_ROW - 1 == V_TARGET_ROW AND V_TARGET_VALUE == '') AND (COL_NUM_TO_LETTER(COL_LETTER_TO_NUM(V_SOURCE_COLUMN)) + 1 == V_TARGET_COLUMN OR COL_NUM_TO_LETTER(COL_LETTER_TO_NUM(V_SOURCE_COLUMN)) - 1 == V_TARGET_COLUMN) THEN
		 UPDATE BOARD SET PIEZA = NULL WHERE FILA= V_SOURCE_ROW AND COLUMNA= V_SOURCE_COLUMN;
        	 UPDATE BOARD SET PIEZA = V_PIEZA WHERE FILA= V_TARGET_ROW AND COLUMNA= V_TARGET_COLUMN;
	      ELSE
		DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. (Peon-DIAG-p)');
	      END IF;
	   END IF;
	ELSE
	    DBMS_OUTPUT.PUT_LINE('No se puede realizar el movimiento. (Peon-2M)');
	END IF; 
		
   END MOVE_P;

END MOVES_PQ01;

/* UPDATE BOARD SET PIEZA = NULL WHERE FILA= V_SOURCE_ROW AND COLUMNA= V_SOURCE_COLUMN;
        UPDATE BOARD SET PIEZA = V_PIEZA WHERE FILA= V_TARGET_ROW AND COLUMNA= V_TARGET_COLUMN;*/